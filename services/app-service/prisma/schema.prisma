// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-arm64-openssl-1.1.x", "debian-openssl-1.1.x", "linux-arm64-openssl-3.0.x"]
}

generator client-py {
  provider  = "prisma-client-py"
  interface = "sync"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GradeYear {
  FIRST
  SECOND
  THIRD
  FOURTH
  FIFTH
  SIXTH
  SEVENTH
  EIGHTH
  FRESHMAN
  SOPHOMORE
  JUNIOR
  SENIOR
  UNI_FRESHMAN
  UNI_SOPHOMORE
  UNI_JUNIOR
  UNI_SENIOR
  GRADUATE
}

enum UserRole {
  JUDIE
  ADMINISTRATOR
  TEACHER
  STUDENT
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
}

enum SubscriptionType {
  MONTHLY
  YEARLY
}

enum PermissionType {
  ORG_ADMIN
  SCHOOL_ADMIN
  ROOM_ADMIN
  STUDENT
}

model Subscription {
  id         String             @id @default(uuid())
  userId     String             @unique @map("user_id")
  status     SubscriptionStatus
  type       SubscriptionType
  stripeId   String             @map("stripe_id")
  canceledAt DateTime?          @map("canceled_at")
  expiresAt  DateTime?          @map("expires_at")
  createdAt  DateTime           @default(now()) @map("created_at")
  updatedAt  DateTime?          @updatedAt @map("updated_at")
  user       User               @relation(fields: [userId], references: [id])

  @@index([id, userId])
  @@map("subscriptions")
}

model User {
  id                   String           @id @default(uuid())
  email                String           @unique
  firstName            String?          @map("first_name")
  lastName             String?          @map("last_name")
  password             String
  receivePromotions    Boolean          @map("receive_promotions")
  gradeYear            GradeYear?       @map("grade_year")
  createdAt            DateTime         @default(now()) @map("created_at")
  updatedAt            DateTime?        @updatedAt @map("updated_at")
  stripeCustomerId     String?          @map("stripe_customer_id")
  questionsAsked       Int              @default(0) @map("questions_asked")
  role                 UserRole         @default(STUDENT)
  organizations        Organization[]
  schools              School[]
  subscription         Subscription?
  chats                Chat[]
  rooms                Room[]
  permissions          UserPermission[]
  createdOrganizations Organization[]   @relation("creator")

  @@index([id, email])
  @@map("users")
}

model Chat {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  subject   String?
  userTitle String?   @map("user_title")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  user      User      @relation(fields: [userId], references: [id])
  deletedAt DateTime? @map("deleted_at")
  messages  Message[]

  @@index([id, userId])
  @@map("chats")
}

enum MessageType {
  BOT
  USER
  SYSTEM
}

model Message {
  id              String      @id @default(uuid())
  content         String
  readableContent String      @map("readable_content")
  type            MessageType
  chatId          String      @map("chat_id")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime?   @updatedAt @map("updated_at")
  deletedAt       DateTime?   @map("deleted_at")
  chat            Chat        @relation(fields: [chatId], references: [id])

  @@index([id, chatId])
  @@map("messages")
}

model MessageMetadata {
  id        String @id @default(uuid())
  messageId String @map("message_id")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@index([id, messageId])
  @@map("message_metadata")
}

model WaitlistEntry {
  id        String    @id @default(uuid())
  email     String    @unique
  userId    String?   @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("waitlist_entries")
}

// Multi Tenant
model Organization {
  id                  String           @id @default(uuid())
  name                String           @unique
  primaryContactEmail String           @map("primary_contact_email")
  creatorId           String           @map("creator_id")
  createdAt           DateTime         @default(now()) @map("created_at")
  updatedAt           DateTime?        @updatedAt @map("updated_at")
  users               User[]
  schools             School[]
  permissions         UserPermission[]
  rooms               Room[]
  invites             Invite[]
  creator             User?            @relation("creator", fields: [creatorId], references: [id])
  deletedAt           DateTime?        @map("deleted_at")

  @@map("organizations")
}

model School {
  id             String           @id @default(uuid())
  name           String           @unique
  address        String?
  organizationId String           @map("organization_id")
  organization   Organization     @relation(fields: [organizationId], references: [id])
  users          User[]
  rooms          Room[]
  permissions    UserPermission[]
  invites        Invite[]
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime?        @updatedAt @map("updated_at")
  deletedAt      DateTime?        @map("deleted_at")

  @@map("schools")
}

model Room {
  id             String           @id @default(uuid())
  name           String
  schoolId       String?          @map("school_id")
  school         School?          @relation(fields: [schoolId], references: [id])
  organizationId String?          @map("organization_id")
  organization   Organization?    @relation(fields: [organizationId], references: [id])
  students       User[]
  permissions    UserPermission[]
  invites        Invite[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("rooms")
}

model UserPermission {
  id             String         @id @default(uuid())
  userId         String?        @map("user_id")
  inviteId       String?        @map("invite_id")
  schoolId       String?        @map("school_id")
  organizationId String?        @map("organization_id")
  roomId         String?        @map("room_id")
  role           UserRole       @default(STUDENT)
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime?      @updatedAt @map("updated_at")
  deletedAt      DateTime?      @map("deleted_at")
  type           PermissionType
  user           User?          @relation(fields: [userId], references: [id])
  invite         Invite?        @relation(fields: [inviteId], references: [id])
  school         School?        @relation(fields: [schoolId], references: [id])
  organization   Organization?  @relation(fields: [organizationId], references: [id])
  room           Room?          @relation(fields: [roomId], references: [id])

  @@index([id, userId, schoolId])
  @@map("user_permissions")
}

model Invite {
  id             String           @id @default(uuid())
  email          String           @unique
  firstName      String?          @map("first_name")
  lastName       String?          @map("last_name")
  schoolId       String?          @map("school_id")
  organizationId String?          @map("organization_id")
  roomId         String?          @map("room_id")
  gradeYear      GradeYear?       @map("grade_year")
  role           UserRole         @default(STUDENT)
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime?        @updatedAt @map("updated_at")
  deletedAt      DateTime?        @map("deleted_at")
  school         School?          @relation(fields: [schoolId], references: [id])
  organization   Organization?    @relation(fields: [organizationId], references: [id])
  room           Room?            @relation(fields: [roomId], references: [id])
  permissions    UserPermission[]

  @@index([id, email])
  @@map("invites")
}
