// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-arm64-openssl-1.1.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GradeYear {
  FRESHMAN
  SOPHOMORE
  JUNIOR
  SENIOR
  UNI_FRESHMAN
  UNI_SOPHOMORE
  UNI_JUNIOR
  UNI_SENIOR
  GRADUATE
}

enum UserRole {
  ADMINISTRATOR
  TEACHER
  STUDENT
  JUDIE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
}

enum SubscriptionType {
  MONTHLY
  YEARLY
}

model Subscription {
  id         String             @id @default(uuid())
  userId     String             @unique @map("user_id")
  status     SubscriptionStatus
  type       SubscriptionType
  stripeId   String             @map("stripe_id")
  canceledAt DateTime?          @map("canceled_at")
  expiresAt  DateTime?          @map("expires_at")
  createdAt  DateTime           @default(now()) @map("created_at")
  updatedAt  DateTime?          @updatedAt @map("updated_at")
  user       User               @relation(fields: [userId], references: [id])

  @@index([id, userId])
  @@map("subscriptions")
}

model User {
  id                String        @id @default(uuid())
  email             String        @unique
  firstName         String?       @map("first_name")
  lastName          String?       @map("last_name")
  password          String
  receivePromotions Boolean       @map("receive_promotions")
  gradeYear         GradeYear?    @map("grade_year")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime?     @updatedAt @map("updated_at")
  role              UserRole      @default(STUDENT)
  stripeCustomerId  String?       @map("stripe_customer_id")
  questionsAsked    Int           @default(0) @map("questions_asked")
  subscription      Subscription?
  chats             Chat[]

  @@index([id, email])
  @@map("users")
}

model Chat {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  subject   String?
  userTitle String?   @map("user_title")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  user      User      @relation(fields: [userId], references: [id])
  deletedAt DateTime? @map("deleted_at")
  messages  Message[]

  @@index([id, userId])
  @@map("chats")
}

enum MessageType {
  BOT
  USER
  SYSTEM
}

model Message {
  id              String      @id @default(uuid())
  content         String
  readableContent String      @map("readable_content")
  type            MessageType
  chatId          String      @map("chat_id")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime?   @updatedAt @map("updated_at")
  chat            Chat        @relation(fields: [chatId], references: [id])

  @@index([id, chatId])
  @@map("messages")
}

model WaitlistEntry {
  id        String    @id @default(uuid())
  email     String    @unique
  userId    String?   @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("waitlist_entries")
}
